---
config:
  os:
  {%- for os_name in os_info +%}
    {{ os_name }}:
      family: "{{ os_info[os_name].family }}"
      distro: "{{ os_info[os_name].distro }}"
      version: "{{ os_info[os_name].version }}"
      includes:
        - "{{ os_info[os_name].distro }}{{ os_info[os_name].version}}.yml"
        - "{{ os_info[os_name].distro }}.yml"
        - "{{ os_info[os_name].family }}.yml"
  {%- endfor +%}

  be:
    name: "{{ be }}"
    variant: "{{ variant }}"

  data: {{ environments[be].data | default({}) }}

  tests: {{ tests }}

  provisioners:
  {%- for prov in environments[be].nodes | dict2items | map(attribute='value.provisioner', default='vagrant') | unique +%}
    {{ prov }}:
    {%- for item in provisioners[prov] | default({}) +%}
      {{ item }}: {{ provisioners[prov][item] }}
    {%- endfor +%}
      hosts:
      {%- for name in environments[be].nodes +%}
        {%- set data = environments[be].nodes[name] +%}
        {%- if data.provisioner | default(environments[be].provisioner | default('vagrant')) == prov +%}
        {%- for idx in range(data.instances | default(1)) +%}
        - {{ name }}{{ idx }}
        {%- endfor +%}
        {%- endif +%}
      {%- endfor +%}
  {%- endfor +%}

  nodes:
  {%- for name in environments[be].nodes +%}
    {%- set data = environments[be].nodes[name] +%}
    {%- set prov = data.provisioner | default(environments[be].provisioner | default('vagrant')) +%}
    {%- for idx in range(data.instances | default(1)) +%}
    {{ name }}{{ idx }}:
      groups: {{ data.groups }}
      provisioner: {{ prov }}
      os: {{ data.os | default(environments[be].os | default(os)) }}
      cpus: {{ data.cpus | default(environments[be].cpus) }}
      memory: {{ data.memory | default(environments[be].memory) }}
      disks: {{ data.disks | default([]) }}
      networks:
      {%- for net in data.networks | default({}) +%}
        {{ net }}: {{ provisioners[prov].networks[net] | ansible.utils.ipaddr(data.networks[net] + idx) | ansible.utils.ipaddr('address') }}
      {%- endfor +%}
      ctdb:
      {%- for net in data.ctdb | default({}) +%}
        {{ net }}: {{ provisioners[prov].networks[net] | ansible.utils.ipaddr(data.ctdb[net] + idx) | ansible.utils.ipaddr('address') }}
      {%- endfor +%}
    {%- endfor +%}
  {%- endfor +%}

  groups:
  {%- for group in environments[be].nodes.values() | map(attribute='groups') | flatten | unique | list +%}
    {{ group }}:
    {%- for host in environments[be].nodes | dict2items | selectattr('value.groups', 'contains', group) | map(attribute='key') | list +%}
      {%- for idx in range(environments[be].nodes[host].instances | default(1)) +%}
      - {{ host }}{{ idx }}
      {%- endfor +%}
    {%- endfor +%}
  {%- endfor +%}

  statedir: "{{ misc.host.statedir }}/sit.{{ backend }}_statedump"
  configdir: "{{ misc.host.configdir }}"

---
- name: Ensure /etc/ceph exists
  file:
    path: /etc/ceph
    state: directory

- name: Install Ceph
  delegate_to: "{{ config.groups['cluster'][0] }}"
  run_once: true
  block:
    - name: Bootstrap the ceph node
      command: >
        /root/cephadm bootstrap
        --mon-ip {{ config.nodes[inventory_hostname].networks.private }}
        --ssh-private-key /root/.ssh/id_rsa
        --ssh-public-key /root/.ssh/id_rsa.pub
        --skip-monitoring-stack
      args:
        creates: /etc/ceph/ceph.conf

    - name: Add other ceph nodes
      command: /root/cephadm shell -- ceph orch host add "{{ item }}" --labels _admin
      loop: "{{ config.groups['cluster'][1:] }}"

    - name: Set mon count to 3
      command: /root/cephadm shell -- ceph orch apply mon 3

    - name: Wait for Ceph infrastructure to come up
      command: /root/cephadm shell -- ceph orch ls --format=json
      register: ceph_status
      vars:
        mgr_filter: >-
          [*] | [?
            service_type == 'mgr' &&
            status.size > `0` &&
            status.running == status.size
          ]
        mon_filter: "[*] | [?service_type == 'mon' && status.running == `3`]"
        crash_filter: >-
          [*] | [?
            service_type == 'crash' &&
            status.running == `{{ config.groups['cluster'] | length }}`
          ]
      until:
        - ceph_status.stdout | from_json | json_query(mgr_filter) | length > 0
        - ceph_status.stdout | from_json | json_query(mon_filter) | length > 0
        - ceph_status.stdout | from_json | json_query(crash_filter) | length > 0
      retries: 100
      delay: 1

    - name: Add all available devices
      command: /root/cephadm shell -- ceph orch apply osd --all-available-devices

    - name: Wait for Ceph OSDs to come up
      command: /root/cephadm shell -- ceph orch ls osd --format=json
      register: ceph_status
      vars:
        osd_filter: >-
          [*] | [?
            status.running == `{{
              config.nodes.values() |
              selectattr('groups', 'contains', 'cluster') |
              map(attribute='disks') |
              map('length') |
              sum
            }}`
          ]
      until: ceph_status.stdout | from_json | json_query(osd_filter) | length > 0
      retries: 100
      delay: 3

    - name: Create a CephFS volume
      command: /root/cephadm shell -- ceph fs volume create sit_fs --placement=1

    - name: Wait for volume's MDS to come up
      command: /root/cephadm shell -- ceph orch ls mds mds.sit_fs --format=json
      register: ceph_status
      until: >-
        ceph_status.stdout | from_json | json_query(
          "[*] | [?status.size > `0` && status.running == status.size]"
        ) | length > 0
      retries: 100
      delay: 1

    - name: Create a user for CephFS
      command: /root/cephadm shell -- ceph fs authorize sit_fs client.sit / rw
      register: ceph_auth

    - name: Fetch minimal conf
      command: /root/cephadm shell -- ceph config generate-minimal-conf
      register: ceph_conf

- name: Generate a ceph conf with key
  copy:
    dest: "/etc/ceph/sit.ceph.conf"
    content: |
      {{ ceph_conf.stdout }}

      {{ ceph_auth.stdout }}

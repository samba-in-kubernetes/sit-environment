---
- name: Check for required variables
  block:
    - fail:
        msg: "Please provide required variable: ctdb_network_private_interfaces"
      when: ctdb_network_private_interfaces is undefined
    - fail:
        msg: "Please provide these required variable: ctdb_network_public_interfaces"
      when: ctdb_network_public_interfaces is undefined
    - fail:
        msg: "Please provide these required variable: ctdb_network_public_interface_subnet_mask"
      when: ctdb_network_public_interface_subnet_mask is undefined
    - fail:
        msg: "Please provide these required variable: ctdb_network_public_interface_name"
      when: ctdb_network_public_interface_name is undefined

- name: Create lock directory
  when: config.data.ctdb_mutex is not defined
  file:
    path: "{{ config.paths.ctdb.var_lib }}/lock"
    state: directory

- name: Process backend specific tasks
  include_tasks: "{{ config.be.name }}/main.yml"
  vars:
    ctdb_lock_path: "{{ config.paths.ctdb.var_lib }}/lock"

- name: Update selinux contexts
  when: config.data.ctdb_mutex is not defined
  command: restorecon -R "{{ config.paths.ctdb.var_lib }}/lock"

- name: Check firewall
  command: firewall-cmd --state
  failed_when: false
  register: fwd_state

- name: Configure firewall
  when: fwd_state.stdout == "running"
  block:
    - name: Add ctdb rules to firewalld
      firewalld:
        service: ctdb
        permanent: yes
        state: enabled

    - name: Reload firewall
      command: firewall-cmd --reload

- name: Configure CTDB
  ini_file:
    path: "{{ config.paths.ctdb.etc }}/ctdb.conf"
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    - section: cluster
      option: cluster lock
      value: "{{ config.paths.ctdb.var_lib }}/lock/cluster.lock"
    # See https://github.com/samba-in-kubernetes/sit-environment/issues/18
    - section: legacy
      option: realtime scheduling
      value: "false"

- name: Create {{ config.paths.ctdb.etc }}/nodes
  copy:
    content: |
      {% for item in ctdb_network_private_interfaces -%}
      {{ item }}
      {% endfor -%}
    dest: '{{ config.paths.ctdb.etc }}/nodes'
    mode: '0644'

- name: Create {{ config.paths.ctdb.etc }}/public_addresses
  copy:
    content: |
      {% for item in ctdb_network_public_interfaces -%}
      {{ item }}/{{ ctdb_network_public_interface_subnet_mask }} {{ ctdb_network_public_interface_name }}
      {% endfor -%}
    dest: '{{ config.paths.ctdb.etc }}/public_addresses'
    mode: '0644'

- name: Enable check consistency of databases during startup
  command: '{{ config.paths.ctdb.bin }}/ctdb event script enable legacy 00.ctdb'

- name: Enable check consistency of databases during startup
  command: '{{ config.paths.ctdb.bin }}/ctdb event script enable legacy 01.reclock'

- name: Enable monitor system resources
  command: '{{ config.paths.ctdb.bin }}/ctdb event script enable legacy 05.system'

- name: Enable network interface management by ctdb
  command: '{{ config.paths.ctdb.bin }}/ctdb event script enable legacy 10.interface'

- name: Enable samba management by ctdb
  command: '{{ config.paths.ctdb.bin }}/ctdb event script enable legacy 50.samba'

- name: Restart ctdb
  service: name=ctdb state=restarted enabled=yes

- name: Ensure cluster is in HEALTHY state
  run_once: yes
  command: ctdb nodestatus all
  register: nodestatus
  until: nodestatus.rc == 0
  retries: 20
  delay: 3

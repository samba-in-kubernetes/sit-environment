#!/bin/bash

set -eu

function check_version() {
    local v

    for v in "${VERSION[@]}"; do
        [[ ${v} -ne ${1-0} ]] && break
        unset v
        shift
    done

    [[ ${v-0} -ge ${1-0} ]]
}

function template() {
    local file="${SITE_HOME}/${1}"
    local mode="${2}"
    local content="${3}"

    sed -n 's/^\s*|//p' <<<"${content}" >"${file}"
    chmod "${mode}" "${file}"
}

function wrapper() {
    bash --rcfile "${SITE_HOME}/.siterc" -i "${@}"
}

function run() {
    wrapper -c "${*}"
}

function cmd_show() {
    find "${SITE_USER}" -mindepth 1 -maxdepth 1 -type d |
        xargs -i{} bash -c '
            if [[ -f "{}/.siterc" ]]; then
                echo "$(basename "{}") $(grep -o "EXTRA_VARS.*" "{}/.siterc")"
            fi
        '
}

function cmd_yamllint() {
    yamllint -c .yamllint .
}

function cmd_statedump() {
    run make nodes.statedump
}

function cmd_shell() {
    wrapper
}

function cmd_create() {
    local opts

    opts=(
        "--symlinks"
        "--clear"
    )
    check_version 3 6 && opts+=("--prompt" "SITE:${SITE_NAME}")
    check_version 3 9 && opts+=("--upgrade-deps")

    ${PYTHON} -m venv "${opts[@]}" "${SITE_HOME}"
    template ".siterc" 0644 "
        |if [[ -f ~/.bashrc ]]; then
        |    source ~/.bashrc
        |fi
        |
        |export EXTRA_VARS='${EXTRA_VARS-}'
        |
        |alias ssh=\"ssh -F \\\"\${SITE_HOME}/ssh-config-host\\\"\"
        |alias scp=\"scp -F \\\"\${SITE_HOME}/ssh-config-host\\\"\"
        |alias sftp=\"sftp -F \\\"\${SITE_HOME}/ssh-config-host\\\"\"
        |
        |source \"\${SITE_HOME}/bin/activate\"
        |
        |cd \"\${SITE_HOME}\"
    "

    template "Makefile" 0644 "
        |PHONY: \$(MAKECMDGOALS) all
        |
        |\$(or \$(MAKECMDGOALS), all):
        |	@make -C \"\${SITE_ROOT}/playbooks\" \$(MAKECMDGOALS)
    "

    cp "${SITE_ROOT}/requirements.txt" "${SITE_HOME}"
    cp "${SITE_ROOT}/settings.yml" "${SITE_HOME}"

    run pip install --upgrade -r requirements.txt
}

function cmd_build() {
    run make
}

function cmd_clean() {
    run make clean
}

function cmd_destroy() {
    cmd_clean
    rm -rf "${SITE_HOME}"
}

export SITE_USER="$(realpath "${HOME}/.site")"

mkdir -p "${SITE_USER}"

CMD="${1-show}"

if [[ "${CMD}" == "show" ]]; then
    cmd_show
    exit 0
elif [[ "${CMD}" == "yamllint" ]]; then
    cmd_yamllint
    exit 0
fi

PYTHON="$(echo -n "${PATH}" |
    tr ':' '\n' |
    xargs -i{} find {} -maxdepth 1 -type f -regex '.*/python[0-9.]*' 2>/dev/null |
    xargs -i{} bash -c "echo \$({} --version | tr -dc '0-9.') {}" |
    LC_ALL=C sort -Vr |
    head -n 1 |
    cut -d" " -f 2-)"

VERSION=($(${PYTHON} --version | tr -dc '0-9.' | tr '.' ' '))

if ! check_version 3 4; then
    echo "Python 3.4+ is required" >&2
    exit 1
fi

echo "Using ${PYTHON} ($(IFS=.; echo "${VERSION[*]}"))"

export SITE_HOME="$(realpath "${SITE_USER}/${2?Environment name is not specified}")"
export SITE_NAME="$(basename "${SITE_HOME}")"
export SITE_ROOT="$(realpath "$(dirname "${0}")")"

if [[ "${CMD}" == "create" ]]; then
    cmd_create
    exit 0
fi

if [[ ! -d "${SITE_HOME}" ]]; then
    if [[ "${CMD}" != "destroy" ]]; then
        echo "Directory doesn't exist" >&2
        exit 1
    fi
    exit 0
fi

if [[ ! -f "${SITE_HOME}/.siterc" ]]; then
    echo "Directory is not a SITE configuration" >&2
    exit 1
fi

case "${CMD}" in
    "statedump")
        cmd_statedump
        ;;
    "shell")
        cmd_shell
        ;;
    "build")
        cmd_build
        ;;
    "clean")
        cmd_clean
        ;;
    "destroy")
        cmd_destroy
        ;;
    *)
        echo "Unknown command" >&2
        exit 1
esac

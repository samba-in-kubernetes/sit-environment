---

# This determines the properties of each OS so that it can be used for better
# conditionals and reduce duplication in some places.
os_info:
  centos8:
    family: redhat
    distro: centos
    version: 8

  centos9:
    family: redhat
    distro: centos
    version: 9

misc:
  host:
    statedir: "/tmp"
    configdir: "/tmp/config"

paths:
  samba:
    etc: /etc/samba

  ctdb:
    var_lib: /var/lib/ctdb
    etc: /etc/ctdb
    bin: /bin

  mount: /mnt

# Creation of accounts:
#
# Here are defined lists of groups and users, that are to be created in the test
# nodes. Since it must be possible to define different accounts in different
# types of machines, all definitions are created inside named objects, which
# will later be referenced from the 'environment' object.
#
# Groups are created inside the 'groups' sub-object. Each group has the
# following properties:
#
#   gid: (required)
#     The GID number to assign to this group account.
#
#   instances: (optional)
#     Number of group accounts to create using these properties. If not present,
#     a regular group will be created. If present, a number of groups will be
#     created using the same data but modifying the following properties:
#
#       gid: The first group will be assigned the gid specified, but it will be
#            incremented by one for each new group.
#
#       name: The name of the group will be suffixed by an incrementing index,
#             starting from 1.
#
# Note: default group names (those with the same name as the user), don't need
#       to be defined. They are created automatically. This object is intended
#       to create supplementary groups.
#
# Users are created inside the 'users' sub-object. Each user has the following
# properties:
#
#   uid: (required)
#     The UID number to assign to this user account.
#
#   primary_group: (optional, default: a group with the same name as the user)
#     The primary group to assign to the user account. If present, it must be
#     defined in the 'groups' object.
#
#     The name cannot reference a template group (one defined with the
#     'instances' value). If the primary group belongs to a template group,
#     then the index must also be included as part of the name.
#
#   password: (optional, default: the name of the user)
#     The password to assign to the user account.
#
#   comment: (optional)
#     A comment to assign to the user account.
#
#   groups: (optional)
#     A list of supplementary groups that will be assigned to the user account.
#     All of them must be defined in the 'groups' object.
#
#     If a name references a template group (one defined with the 'instances'
#     value), then the user is made member of all groups from the template.
#
#   instances: (optional)
#     Number of user accounts to create using these properties. If not present,
#     a regular user will be created. If present, a number of users will be
#     created using the same data but modifying the following properties:
#
#       uid: The first user will be assigned the uid specified, but it will be
#            incremented by one for each new user.
#
#       name: The name of the user will be suffixed by an incrementing index,
#             starting from 1.
#
#   samba: (optional, default: false)
#     Boolean that indicates if this user will be created in samba. This only
#     has effect if the target node has samba installed. Otherwise it's ignored.
#
accounts:
  default:
    users:
      test:
        uid: 2001
        password: x
        instances: 2
        samba: true

resources:
  # Percentage of free memory that will be used for sit-environment by default.
  # It can be overridden by setting the `memory` extra variable.
  #
  # All VMs are guaranteed to use the minimum memory defined, even if this
  # makes them use more than the amount of memory defined here.
  #
  # The actual amount of memory assigned to each VM is computed by dynamically
  # distributing the portion of the free memory assigned to sit-environment
  # proportionally based on the memory weight of each VM.
  #
  # B: Sum of the minimum memory assigned to each VM.
  # T: Sum of the weights assigned to each VM.
  # G: Total available memory to sit-environment, which is equal to the total
  #    free memory multiplied by the defined percentage.
  # Mi: Total memory assigned to i-th VM.
  # mi: Minimum memory assigned to i-th VM.
  # wi: Weight assigned to i-th VM.
  #
  # Mi = mi + int(max(G - B, 0) * wi / T)
  #
  # Examples with 50% memory utilization and 1 GiB minimum:
  #
  #           Weight  58 GiB Free    38 GiB Free    18 GiB Free    8 GiB Free
  # setup0:      0       1 GiB          1 GiB          1 GiB         1 GiB
  # client0:     1       6 GiB          4 GiB          2 GiB         1 GiB
  # storage0:    2      11 GiB          7 GiB          3 GiB         1 GiB
  # storage1:    2      11 GiB          7 GiB          3 GiB         1 GiB
  memory: 50

  # Percentage of the cores that will be used for sit-environment by default.
  # It can be overridden by setting the `cpu` extra variable.
  #
  # This is equivalent to the `memory` option but applied to CPU cores.
  #
  # It's allowed to use a value higher than 100% assuming that some VMs will
  # actually not use all the cores at 100%.
  cpu: 100

# List of tests to run
tests:
  - sit-test-cases

provisioners:
  vagrant:
    images:
      centos8: generic/centos8s
      centos9: generic/centos9s

    networks:
      private: 192.168.122.0/24
      public: 192.168.123.0/24

#    # Storage pool to use for the virtual disks (optional)
#    pool: data

# The `environments` object contains one entry for each defined backend,
# which specifies the types of VMs to create, the amount of each one, and
# the resources they need.
#
# Each environment has the following properties:
#
#   provisioner: (optional, default: 'vagrant')
#     Default provisioner used to provision the hosts of the environment.
#     This value can be overridden by specific VM type definitions.
#
#   os: (optional, default: `use_distro` if defined, 'centos9' otherwise)
#     Default OS installed on all hosts of the environment. This value can
#     be overridden by specific VM type definitions.
#
#   cpus: (required)
#     Default minimum number of CPUs to assign to each VM. This value can be
#     overridden by specific VM type definitions.
#
#   memory: (required)
#     Default minimum amount of memory (in MiB) assigned to each VM. This
#     value can be overridden by specific VM type definitions.
#
#   domain: (optional, default: None)
#     The DNS domain name to append to the VM's name to form a FQDN. If
#     it's not present, the machine's hostname will be just its name.
#
#   data: (optional, default: {})
#     This field contains any extra data specific to the environment that
#     is needed to complete the installation (this data is used only by
#     tasks specific for this environment). It can contain anything, the
#     structure is free.
#
#   nodes: (required)
#     This field contains the types of VMs to create. The name of the type
#     will be suffixed with an incremental number (starting at 0) to form
#     the name of the VMs of each type.
#
# Each defined node type has the following properties:
#
#   provisioner: (optional, default: the value of `provisioner` in the
#                 environment)
#     Provisioner used to provision this VM type.
#
#   os: (optional, default: the value of `os` in the environment)
#     OS installed on this VM type.
#
#   instances: (optional, default: 1)
#     Defines how many VMs of this type will be created.
#
#   cpus: (optional, default: the value of `cpus` in the environment)
#     Minimum number of CPUs for this specific VM type.
#
#   cpu_weight: (optional, default: 1)
#     Relative weight of the number of CPUs assigned to this VM type. A higher
#     weight will assign more CPUs to this VM type. A value of 0 will use just
#     the minimum number of CPUs defined by the `cpus` option. See the comment
#     in the `resources` section to see how this value works.
#
#   memory: (optional, default: the value of `memory` in the environment)
#     Minimum amount of memory for this specific VM type.
#
#   memory_weight: (optional, default: 1)
#     Relative weight of the memory assigned to this VM type. A higher weight
#     will assign more memory to this VM type. A value of 0 will use just the
#     minimum memory defined by the `memory` option. See the comment in the
#     `resources` section to see how this value works.
#
#   disks: (optional, default: [])
#     List of additional disks for this type of VM (besides the system
#     disk). For each disk, only the size (in GiB) is specified.
#
#   networks: (optional, default: {})
#     This field enumerates the networks to connect to the VMs of this
#     type. The networks are referenced using the name previously defined
#     in `vagrant.networks`, and a host number for each one must be
#     provided. The actual IP address will be computed combining the
#     defined network with the host number.
#
#   ctdb: (optional, default: {})
#     This field is similar to the `networks` field but defines virtual
#     IPs used by CTDB.
#
#   groups: (required)
#     List of ansible group names where the VMs of this type will be
#     assigned to.
#
#   accounts: (optional)
#     List of predefined account objects that will be used to create groups
#     and users for this specific VM type.
#
environments:
  glusterfs:
    cpus: 2
    memory: 1024

    nodes:
      setup:
        cpu_weight: 0
        memory_weight: 0
        networks:
          private: 200
        groups: [admin]
        os: centos8

      client:
        cpu_weight: 1
        memory_weight: 1
        networks:
          public: 5
        groups: [clients]

      storage:
        instances: 2
        cpu_weight: 2
        memory_weight: 2
        disks: [10, 10, 10]
        networks:
          private: 100
          public: 100
        ctdb:
          public: 10
        groups: [cluster]
        os: centos8
        accounts: [default]

  xfs:
    cpus: 2
    memory: 1024

    nodes:
      setup:
        cpu_weight: 0
        memory_weight: 0
        networks:
          private: 200
        groups: [admin]

      storage:
        cpu_weight: 1
        memory_weight: 1
        disks: [10]
        networks:
          private: 100
          public: 100
        ctdb:
          public: 10
        groups: [cluster]
        accounts: [default]

      client:
        cpu_weight: 1
        memory_weight: 1
        networks:
          public: 5
        groups: [clients]

  cephfs:
    cpus: 2
    memory: 1024

    data:
      branch: main

    nodes:
      setup:
        cpu_weight: 0
        memory_weight: 0
        networks:
          private: 200
        groups: [admin]

      storage:
        instances: 3
        cpu_weight: 2
        memory_weight: 2
        disks: [10, 10, 10]
        networks:
          private: 100
          public: 100
        ctdb:
          public: 10
        groups: [cluster]
        accounts: [default]

      client:
        cpu_weight: 1
        memory_weight: 1
        networks:
          public: 5
        groups: [clients]
